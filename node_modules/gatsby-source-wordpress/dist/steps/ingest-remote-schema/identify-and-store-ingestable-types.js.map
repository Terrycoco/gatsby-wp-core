{"version":3,"file":"identify-and-store-ingestable-types.js","names":["identifyAndStoreIngestableFieldsAndTypes","nodeListFilter","field","name","state","store","getState","introspectionData","fieldBlacklist","typeMap","remoteSchema","pluginOptions","gatsbyApi","cachedFetchedTypes","getPersistentCache","key","restoredFetchedTypesMap","Map","dispatch","setState","fetchedTypes","type","Object","entries","forEach","typeName","typeSettings","lazyNodes","__all","typeIsExcluded","lazyType","get","addFetchedType","interfaces","__schema","types","filter","kind","interfaceType","fields","interfaceField","rootFields","nodeInterfaceTypes","nodeListRootFields","nonNodeRootFields","nodeInterfacePossibleTypeNames","fieldHasNonNullArgs","args","some","arg","nodeField","find","ofType","nodeListField","push","nodeListFieldType","innerField","nodeInterface","nodeInterfaceType","findTypeName","possibleTypes","includes","takesIDinput","RootQuery","excludeFieldNames","excludedFieldName","typeIsABuiltInScalar","nodeListFieldNames","map","nodeListTypeNames","connectionType","nodesField","gatsbyNodesInfo","fieldNames","typeNames","ingestibles"],"sources":["../../../src/steps/ingest-remote-schema/identify-and-store-ingestable-types.js"],"sourcesContent":["import store from \"~/store\"\nimport { typeIsExcluded } from \"~/steps/ingest-remote-schema/is-excluded\"\nimport { typeIsABuiltInScalar } from \"../create-schema-customization/helpers\"\nimport { findTypeName } from \"~/steps/create-schema-customization/helpers\"\nimport { getPersistentCache } from \"~/utils/cache\"\n\nconst identifyAndStoreIngestableFieldsAndTypes = async () => {\n  const nodeListFilter = field => field.name === `nodes`\n\n  const state = store.getState()\n  const { introspectionData, fieldBlacklist, typeMap } = state.remoteSchema\n  const { pluginOptions } = state.gatsbyApi\n\n  const cachedFetchedTypes = await getPersistentCache({\n    key: `previously-fetched-types`,\n  })\n\n  if (cachedFetchedTypes) {\n    const restoredFetchedTypesMap = new Map(cachedFetchedTypes)\n\n    store.dispatch.remoteSchema.setState({\n      fetchedTypes: restoredFetchedTypesMap,\n    })\n  }\n\n  if (pluginOptions.type) {\n    Object.entries(pluginOptions.type).forEach(([typeName, typeSettings]) => {\n      // our lazy types won't initially be fetched,\n      // so we need to mark them as fetched here\n      if (\n        (typeSettings.lazyNodes || pluginOptions.type?.__all?.lazyNodes) &&\n        !typeIsExcluded({ pluginOptions, typeName })\n      ) {\n        const lazyType = typeMap.get(typeName)\n        store.dispatch.remoteSchema.addFetchedType(lazyType)\n      }\n    })\n  }\n\n  const interfaces = introspectionData.__schema.types.filter(\n    type => type.kind === `INTERFACE`\n  )\n\n  for (const interfaceType of interfaces) {\n    if (typeIsExcluded({ pluginOptions, typeName: interfaceType.name })) {\n      continue\n    }\n\n    store.dispatch.remoteSchema.addFetchedType(interfaceType)\n\n    if (interfaceType.fields) {\n      for (const interfaceField of interfaceType.fields) {\n        if (interfaceField.type) {\n          store.dispatch.remoteSchema.addFetchedType(interfaceField.type)\n        }\n      }\n    }\n  }\n\n  const rootFields = typeMap.get(`RootQuery`).fields\n\n  const nodeInterfaceTypes = []\n  const nodeListRootFields = []\n  const nonNodeRootFields = []\n  const nodeInterfacePossibleTypeNames = []\n\n  for (const field of rootFields) {\n    const fieldHasNonNullArgs = field.args.some(\n      arg => arg.type.kind === `NON_NULL`\n    )\n\n    if (fieldHasNonNullArgs) {\n      // we can't know what those args should be, so skip this field\n      continue\n    }\n\n    if (typeIsExcluded({ pluginOptions, typeName: field.type.name })) {\n      continue\n    }\n\n    if (field.type.kind === `OBJECT`) {\n      const type = typeMap.get(field.type.name)\n\n      const nodeField = type?.fields?.find(nodeListFilter)\n\n      if (nodeField && nodeField.type.ofType.kind === `INTERFACE`) {\n        const nodeListField = type.fields.find(nodeListFilter)\n\n        if (nodeListField) {\n          nodeInterfaceTypes.push(nodeListField.type.ofType.name)\n\n          store.dispatch.remoteSchema.addFetchedType(nodeListField.type)\n\n          const nodeListFieldType = typeMap.get(nodeListField.type.ofType.name)\n\n          for (const innerField of nodeListFieldType.fields) {\n            store.dispatch.remoteSchema.addFetchedType(innerField.type)\n          }\n\n          if (\n            // if we haven't marked this as a nodeInterface type then push this to root fields to fetch it\n            // nodeInterface is different than a node which is an interface type.\n            // In Gatsby nodeInterface means the node data is pulled from a different type. On the WP side we can also have nodes that are of an interface type, but we only pull them from a single root field\n            // the problem is that if we don't mark them as a node list root field\n            // we don't know to identify them later as being a node type that will have been fetched and we also wont try to fetch this type during node sourcing.\n            !pluginOptions?.type?.[nodeListField.type.ofType.name]\n              ?.nodeInterface\n          ) {\n            const nodeInterfaceType = typeMap.get(\n              findTypeName(nodeListField.type)\n            )\n\n            // we need to mark all the possible types as being fetched\n            // and also need to record the possible type as a node type\n            for (const type of nodeInterfaceType?.possibleTypes || []) {\n              nodeInterfacePossibleTypeNames.push(type.name)\n              store.dispatch.remoteSchema.addFetchedType(type)\n            }\n\n            nodeListRootFields.push(field)\n          }\n\n          continue\n        }\n      } else if (nodeField) {\n        if (fieldBlacklist.includes(field.name)) {\n          continue\n        }\n\n        store.dispatch.remoteSchema.addFetchedType(nodeField.type)\n\n        nodeListRootFields.push(field)\n        continue\n      }\n    }\n\n    if (fieldBlacklist.includes(field.name)) {\n      continue\n    }\n\n    const takesIDinput = field?.args?.find(arg => arg.type.name === `ID`)\n\n    // if a non-node root field takes an id input, we 99% likely can't use it.\n    // so don't fetch it and don't add it to the schema.\n    if (takesIDinput) {\n      continue\n    }\n\n    if (\n      // if this type is excluded on the RootQuery, skip it\n      pluginOptions.type.RootQuery?.excludeFieldNames?.find(\n        excludedFieldName => excludedFieldName === field.name\n      )\n    ) {\n      continue\n    }\n\n    // we don't need to mark types as fetched if they're supported SCALAR types\n    if (!typeIsABuiltInScalar(field.type)) {\n      store.dispatch.remoteSchema.addFetchedType(field.type)\n    }\n\n    nonNodeRootFields.push(field)\n  }\n\n  const nodeListFieldNames = nodeListRootFields.map(field => field.name)\n\n  const nodeListTypeNames = [\n    ...nodeInterfacePossibleTypeNames,\n    ...nodeListRootFields.map(field => {\n      const connectionType = typeMap.get(field.type.name)\n\n      const nodesField = connectionType.fields.find(nodeListFilter)\n      return nodesField.type.ofType.name\n    }),\n  ]\n\n  const gatsbyNodesInfo = {\n    fieldNames: nodeListFieldNames,\n    typeNames: nodeListTypeNames,\n  }\n\n  store.dispatch.remoteSchema.setState({\n    gatsbyNodesInfo,\n    ingestibles: {\n      nodeListRootFields,\n      nonNodeRootFields,\n      nodeInterfaceTypes,\n    },\n  })\n}\n\nexport { identifyAndStoreIngestableFieldsAndTypes }\n"],"mappings":"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"}