{"version":3,"file":"write-queries-to-disk.js","names":["writeQueriesToDisk","reporter","pluginOptions","debug","graphql","remoteSchema","store","getState","schemaWasChanged","activity","activityTimer","formatLogMessage","start","wordPressGraphQLDirectory","process","cwd","fs","remove","nodeListQueries","nodeQuery","previewQuery","typeInfo","Object","values","nodeQueries","directory","nodesTypeName","ensureDir","writeFile","prettier","format","parser","nonNodeQuery","end"],"sources":["../../../src/steps/ingest-remote-schema/write-queries-to-disk.js"],"sourcesContent":["import fs from \"fs-extra\"\nimport store from \"~/store\"\nimport prettier from \"prettier\"\nimport { formatLogMessage } from \"~/utils/format-log-message\"\n\nexport const writeQueriesToDisk = async ({ reporter }, pluginOptions) => {\n  if (!pluginOptions?.debug?.graphql?.writeQueriesToDisk) {\n    return\n  }\n\n  const { remoteSchema } = store.getState()\n\n  // the queries only change when the remote schema changes\n  // no need to write them to disk in that case\n  if (!remoteSchema.schemaWasChanged) {\n    return\n  }\n\n  const activity = reporter.activityTimer(\n    formatLogMessage(`writing GraphQL queries to disk at ./WordPress/GraphQL/`)\n  )\n\n  activity.start()\n  const wordPressGraphQLDirectory = `${process.cwd()}/WordPress/GraphQL`\n\n  // remove before writing in case there are old types\n  await fs.remove(wordPressGraphQLDirectory)\n\n  for (const {\n    nodeListQueries,\n    nodeQuery,\n    previewQuery,\n    typeInfo,\n  } of Object.values(remoteSchema.nodeQueries)) {\n    const directory = `${wordPressGraphQLDirectory}/${typeInfo.nodesTypeName}`\n\n    await fs.ensureDir(directory)\n\n    await fs.writeFile(\n      `${directory}/node-list-query.graphql`,\n      prettier.format(nodeListQueries[0], { parser: `graphql` }),\n      `utf8`\n    )\n\n    await fs.writeFile(\n      `${directory}/node-single-query.graphql`,\n      prettier.format(nodeQuery, { parser: `graphql` }),\n      `utf8`\n    )\n\n    await fs.writeFile(\n      `${directory}/node-preview-query.graphql`,\n      prettier.format(previewQuery, { parser: `graphql` }),\n      `utf8`\n    )\n  }\n\n  const directory = `${wordPressGraphQLDirectory}/RootQuery`\n\n  await fs.ensureDir(directory)\n\n  await fs.writeFile(\n    `${directory}/non-node-root-query.graphql`,\n    prettier.format(remoteSchema.nonNodeQuery, { parser: `graphql` })\n  )\n\n  activity.end()\n}\n"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AAEO,MAAMA,kBAAkB,GAAG,OAAO;EAAEC;AAAF,CAAP,EAAqBC,aAArB,KAAuC;EAAA;;EACvE,IAAI,EAACA,aAAD,aAACA,aAAD,uCAACA,aAAa,CAAEC,KAAhB,0EAAC,qBAAsBC,OAAvB,kDAAC,sBAA+BJ,kBAAhC,CAAJ,EAAwD;IACtD;EACD;;EAED,MAAM;IAAEK;EAAF,IAAmBC,cAAA,CAAMC,QAAN,EAAzB,CALuE,CAOvE;EACA;;;EACA,IAAI,CAACF,YAAY,CAACG,gBAAlB,EAAoC;IAClC;EACD;;EAED,MAAMC,QAAQ,GAAGR,QAAQ,CAACS,aAAT,CACf,IAAAC,kCAAA,EAAkB,yDAAlB,CADe,CAAjB;EAIAF,QAAQ,CAACG,KAAT;EACA,MAAMC,yBAAyB,GAAI,GAAEC,OAAO,CAACC,GAAR,EAAc,oBAAnD,CAlBuE,CAoBvE;;EACA,MAAMC,gBAAA,CAAGC,MAAH,CAAUJ,yBAAV,CAAN;;EAEA,KAAK,MAAM;IACTK,eADS;IAETC,SAFS;IAGTC,YAHS;IAITC;EAJS,CAAX,IAKKC,MAAM,CAACC,MAAP,CAAclB,YAAY,CAACmB,WAA3B,CALL,EAK8C;IAC5C,MAAMC,SAAS,GAAI,GAAEZ,yBAA0B,IAAGQ,QAAQ,CAACK,aAAc,EAAzE;IAEA,MAAMV,gBAAA,CAAGW,SAAH,CAAaF,SAAb,CAAN;IAEA,MAAMT,gBAAA,CAAGY,SAAH,CACH,GAAEH,SAAU,0BADT,EAEJI,iBAAA,CAASC,MAAT,CAAgBZ,eAAe,CAAC,CAAD,CAA/B,EAAoC;MAAEa,MAAM,EAAG;IAAX,CAApC,CAFI,EAGH,MAHG,CAAN;IAMA,MAAMf,gBAAA,CAAGY,SAAH,CACH,GAAEH,SAAU,4BADT,EAEJI,iBAAA,CAASC,MAAT,CAAgBX,SAAhB,EAA2B;MAAEY,MAAM,EAAG;IAAX,CAA3B,CAFI,EAGH,MAHG,CAAN;IAMA,MAAMf,gBAAA,CAAGY,SAAH,CACH,GAAEH,SAAU,6BADT,EAEJI,iBAAA,CAASC,MAAT,CAAgBV,YAAhB,EAA8B;MAAEW,MAAM,EAAG;IAAX,CAA9B,CAFI,EAGH,MAHG,CAAN;EAKD;;EAED,MAAMN,SAAS,GAAI,GAAEZ,yBAA0B,YAA/C;EAEA,MAAMG,gBAAA,CAAGW,SAAH,CAAaF,SAAb,CAAN;EAEA,MAAMT,gBAAA,CAAGY,SAAH,CACH,GAAEH,SAAU,8BADT,EAEJI,iBAAA,CAASC,MAAT,CAAgBzB,YAAY,CAAC2B,YAA7B,EAA2C;IAAED,MAAM,EAAG;EAAX,CAA3C,CAFI,CAAN;EAKAtB,QAAQ,CAACwB,GAAT;AACD,CA9DM"}