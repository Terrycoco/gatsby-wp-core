{"version":3,"file":"build-types.js","names":["unionType","typeBuilderApi","schema","type","pluginOptions","types","possibleTypes","filter","possibleType","typeIsExcluded","typeName","name","map","buildTypeName","length","resolveType","node","__typename","extensions","infer","filterTypeDefinition","buildUnionType","interfaceType","gatsbyNodeTypes","fieldAliases","fieldBlacklist","state","store","getState","ingestibles","typeMap","remoteSchema","nodeInterfaceTypes","allTypes","values","implementingTypes","Array","from","interfaces","find","singleInterface","get","kind","transformedFields","transformFields","parentInterfacesImplementingTypes","fields","typeDef","includes","buildInterfaceType","objectType","isAGatsbyNode","parentType","Object","keys","description","interfaceTypeSettings","getTypeSettingsByType","exclude","fieldOfTypeWasFetched","buildObjectType","enumType","buildEnumType","enumValues","reduce","accumulator"],"sources":["../../../src/steps/create-schema-customization/build-types.js"],"sourcesContent":["import store from \"~/store\"\nimport { transformFields } from \"./transform-fields\"\nimport { typeIsExcluded } from \"~/steps/ingest-remote-schema/is-excluded\"\nimport {\n  buildTypeName,\n  fieldOfTypeWasFetched,\n  getTypeSettingsByType,\n  filterTypeDefinition,\n} from \"./helpers\"\n\nconst unionType = typeBuilderApi => {\n  const { schema, type, pluginOptions } = typeBuilderApi\n\n  const types = type.possibleTypes\n    .filter(\n      possibleType =>\n        !typeIsExcluded({\n          pluginOptions,\n          typeName: possibleType.name,\n        })\n    )\n    .map(possibleType => buildTypeName(possibleType.name))\n\n  if (!types || !types.length) {\n    return false\n  }\n\n  let unionType = {\n    name: buildTypeName(type.name),\n    types,\n    resolveType: node => {\n      if (node.__typename) {\n        return buildTypeName(node.__typename)\n      }\n\n      return null\n    },\n    extensions: {\n      infer: false,\n    },\n  }\n\n  // @todo add this as a plugin option\n  unionType = filterTypeDefinition(unionType, typeBuilderApi, `UNION`)\n\n  return schema.buildUnionType(unionType)\n}\n\nconst interfaceType = typeBuilderApi => {\n  const { type, schema, gatsbyNodeTypes, fieldAliases, fieldBlacklist } =\n    typeBuilderApi\n\n  const state = store.getState()\n  const { ingestibles, typeMap } = state.remoteSchema\n  const { nodeInterfaceTypes } = ingestibles\n\n  const allTypes = typeMap.values()\n\n  const implementingTypes = Array.from(allTypes)\n    .filter(\n      ({ interfaces }) =>\n        interfaces &&\n        // find types that implement this interface type\n        interfaces.find(singleInterface => singleInterface.name === type.name)\n    )\n    .map(type => typeMap.get(type.name))\n    .filter(\n      type =>\n        type.kind !== `UNION` ||\n        // if this is a union type, make sure the union type has one or more member types, otherwise schema customization will throw an error\n        (!!type.possibleTypes && !!type.possibleTypes.length)\n    )\n\n  const transformedFields = transformFields({\n    parentInterfacesImplementingTypes: implementingTypes,\n    fields: type.fields,\n    gatsbyNodeTypes,\n    fieldAliases,\n    fieldBlacklist,\n  })\n\n  let typeDef = {\n    name: buildTypeName(type.name),\n    fields: transformedFields,\n    extensions: { infer: false },\n  }\n\n  // if this is a node interface type\n  if (nodeInterfaceTypes.includes(type.name)) {\n    // we add nodeType (post type) to all nodes as they're fetched\n    // so we can add them to node interfaces as well in order to filter\n    // by a couple different content types\n    typeDef.fields[`nodeType`] = `String`\n    typeDef.interfaces = [`Node`]\n  } else {\n    // otherwise this is a regular interface type so we need to resolve the type name\n    typeDef.resolveType = node =>\n      node?.__typename ? buildTypeName(node.__typename) : null\n  }\n\n  // @todo add this as a plugin option\n  typeDef = filterTypeDefinition(typeDef, typeBuilderApi, `INTERFACE`)\n\n  return schema.buildInterfaceType(typeDef)\n}\n\nconst objectType = typeBuilderApi => {\n  const {\n    type,\n    gatsbyNodeTypes,\n    fieldAliases,\n    fieldBlacklist,\n    schema,\n    isAGatsbyNode,\n  } = typeBuilderApi\n\n  const transformedFields = transformFields({\n    fields: type.fields,\n    parentType: type,\n    gatsbyNodeTypes,\n    fieldAliases,\n    fieldBlacklist,\n  })\n\n  // if all child fields are excluded, this type shouldn't exist.\n  // check null first, otherwise cause:\n  // TypeError: Cannot convert undefined or null to object at Function.keys (<anonymous>)\n  // Also cause wordpress blog site build failure in createSchemaCustomization step\n  if (!transformedFields || !Object.keys(transformedFields).length) {\n    return false\n  }\n\n  let objectType = {\n    name: buildTypeName(type.name),\n    fields: transformedFields,\n    description: type.description,\n    extensions: {\n      infer: false,\n    },\n  }\n\n  if (type.interfaces) {\n    objectType.interfaces = type.interfaces\n      .filter(interfaceType => {\n        const interfaceTypeSettings = getTypeSettingsByType(interfaceType)\n\n        return !interfaceTypeSettings.exclude && fieldOfTypeWasFetched(type)\n      })\n      .map(({ name }) => buildTypeName(name))\n  }\n\n  if (\n    gatsbyNodeTypes.includes(type.name) ||\n    isAGatsbyNode ||\n    // this accounts for Node types that weren't fetched because\n    // they have no root field to fetch a single node of this type\n    // removing them from the schema breaks the build though\n    // @todo instead, if a node type isn't fetched, remove it\n    // from the entire schema\n    type?.interfaces?.find(({ name }) => name === `Node`)\n  ) {\n    // this is used to filter the node interfaces\n    // by different content types (post types)\n    objectType.fields[`nodeType`] = `String`\n\n    objectType.interfaces = [`Node`, ...objectType.interfaces]\n  }\n\n  // @todo add this as a plugin option\n  objectType = filterTypeDefinition(objectType, typeBuilderApi, `OBJECT`)\n\n  return schema.buildObjectType(objectType)\n}\n\nconst enumType = ({ schema, type }) =>\n  schema.buildEnumType({\n    name: buildTypeName(type.name),\n    values: type.enumValues.reduce((accumulator, { name }) => {\n      accumulator[name] = { name }\n\n      return accumulator\n    }, {}),\n    description: type.description,\n  })\n\nexport default { unionType, interfaceType, objectType, enumType }\n"],"mappings":"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"}