{"version":3,"file":"fetch-nodes.js","names":["fetchWPGQLContentNodes","queryInfo","pluginOptions","helpers","store","getState","gatsbyApi","reporter","url","schema","perPage","nodeListQueries","typeInfo","settings","typeName","nodesTypeName","dispatch","logger","createActivityTimer","allNodesOfContentType","nodeListQuery","contentNodes","paginatedWpNodeFetch","first","after","contentTypePlural","pluralName","nodeTypeName","query","stopActivityTimer","length","singular","singularName","plural","getContentTypeQueryInfos","nodeQueries","remoteSchema","queryInfos","Object","values","filter","exclude","getGatsbyNodeTypeNames","typeMap","queryableTypenames","map","implementingNodeTypes","reduce","accumulator","typename","type","get","possibleTypes","name","Set","runFnForEachNodeQuery","fn","chunkSize","getPluginOptions","requestConcurrency","chunkedQueries","chunk","queries","Promise","all","lazyNodes","usingGatsbyV4OrGreater","fetchWPGQLContentNodesByContentType","contentNodeGroups","contentNodeGroup","push","fetchAndCreateAllNodes","getGatsbyApi","activity","activityTimer","formatLogMessage","start","subscribe","setStatus","entityCount","createdNodeIds","hardCachedNodes","getHardCachedNodes","wpgqlNodesByContentType","createNodesActivity","createGatsbyNodesFromWPGQLContentNodes","setHardCachedNodes","end","restoreHardCachedNodes","setPersistentCache","key","CREATED_NODE_IDS","value"],"sources":["../../../../src/steps/source-nodes/fetch-nodes/fetch-nodes.js"],"sourcesContent":["import { createGatsbyNodesFromWPGQLContentNodes } from \"../create-nodes/create-nodes\"\nimport { paginatedWpNodeFetch } from \"./fetch-nodes-paginated\"\nimport { formatLogMessage } from \"~/utils/format-log-message\"\nimport { CREATED_NODE_IDS } from \"~/constants\"\nimport { usingGatsbyV4OrGreater } from \"~/utils/gatsby-version\"\n\nimport store from \"~/store\"\nimport { getGatsbyApi, getPluginOptions } from \"~/utils/get-gatsby-api\"\nimport chunk from \"lodash/chunk\"\n\nimport {\n  getHardCachedNodes,\n  restoreHardCachedNodes,\n  setHardCachedNodes,\n  setPersistentCache,\n} from \"~/utils/cache\"\n\n/**\n * fetchWPGQLContentNodes\n *\n * fetches and paginates remote nodes by post type while reporting progress\n */\nexport const fetchWPGQLContentNodes = async ({ queryInfo }) => {\n  const { pluginOptions, helpers } = store.getState().gatsbyApi\n  const { reporter } = helpers\n  const {\n    url,\n    schema: { perPage },\n  } = pluginOptions\n\n  const { nodeListQueries, typeInfo, settings } = queryInfo\n\n  const typeName = typeInfo.nodesTypeName\n\n  store.dispatch.logger.createActivityTimer({\n    typeName,\n    pluginOptions,\n    reporter,\n  })\n\n  let allNodesOfContentType = []\n\n  // there's normally just one query here, but more can be added using the settings.nodeListQueries api\n  for (const nodeListQuery of nodeListQueries) {\n    const contentNodes = await paginatedWpNodeFetch({\n      first: perPage,\n      after: null,\n      contentTypePlural: typeInfo.pluralName,\n      nodeTypeName: typeInfo.nodesTypeName,\n      query: nodeListQuery,\n      url,\n      settings,\n      helpers,\n    })\n\n    allNodesOfContentType = [...allNodesOfContentType, ...contentNodes]\n  }\n\n  store.dispatch.logger.stopActivityTimer({ typeName })\n\n  if (allNodesOfContentType && allNodesOfContentType.length) {\n    return {\n      singular: queryInfo.typeInfo.singularName,\n      plural: queryInfo.typeInfo.pluralName,\n      allNodesOfContentType,\n    }\n  }\n\n  return false\n}\n\n/**\n * getContentTypeQueryInfos\n *\n * returns query infos (Type info & GQL query strings) filtered to\n * remove types that are excluded in the plugin options\n *\n * @returns {Array} Type info & GQL query strings\n */\nexport const getContentTypeQueryInfos = () => {\n  const { nodeQueries } = store.getState().remoteSchema\n  const queryInfos = Object.values(nodeQueries).filter(\n    ({ settings }) => !settings.exclude\n  )\n  return queryInfos\n}\n\nexport const getGatsbyNodeTypeNames = () => {\n  const { typeMap } = store.getState().remoteSchema\n\n  const queryableTypenames = getContentTypeQueryInfos().map(\n    query => query.typeInfo.nodesTypeName\n  )\n\n  const implementingNodeTypes = queryableTypenames.reduce(\n    (accumulator, typename) => {\n      const type = typeMap.get(typename)\n\n      if (type.possibleTypes?.length) {\n        accumulator = [\n          ...accumulator,\n          ...type.possibleTypes.map(({ name }) => name),\n        ]\n      }\n\n      return accumulator\n    },\n    []\n  )\n\n  return [...new Set([...queryableTypenames, ...implementingNodeTypes])]\n}\n\n/**\n * fetchWPGQLContentNodesByContentType\n *\n * fetches nodes from the remote WPGQL server and groups them by post type\n *\n * @returns {Array}\n */\nexport const runFnForEachNodeQuery = async fn => {\n  const nodeQueries = getContentTypeQueryInfos()\n\n  const chunkSize = getPluginOptions()?.schema?.requestConcurrency || 15\n  const chunkedQueries = chunk(nodeQueries, chunkSize)\n\n  for (const queries of chunkedQueries) {\n    await Promise.all(\n      queries.map(async queryInfo => {\n        if (\n          // if the type settings call for lazyNodes, don't fetch them upfront here\n          (queryInfo.settings.lazyNodes &&\n            // but not in Gatsby v4+ since lazyNodes isn't supported in 4+\n            !usingGatsbyV4OrGreater) ||\n          // for media items we only want to fetch referenced nodes so don't fetch them here.\n          queryInfo.typeInfo.nodesTypeName === `MediaItem`\n        ) {\n          return\n        }\n\n        await fn({ queryInfo })\n      })\n    )\n  }\n}\n\nexport const fetchWPGQLContentNodesByContentType = async () => {\n  const contentNodeGroups = []\n\n  await runFnForEachNodeQuery(async ({ queryInfo }) => {\n    const contentNodeGroup = await fetchWPGQLContentNodes({ queryInfo })\n\n    if (contentNodeGroup) {\n      contentNodeGroups.push(contentNodeGroup)\n    }\n  })\n\n  return contentNodeGroups\n}\n\n/**\n * fetchAndCreateAllNodes\n *\n * uses query info (generated from introspection in onPreBootstrap) to\n * fetch and create Gatsby nodes from any lists of nodes in the remote schema\n */\nexport const fetchAndCreateAllNodes = async () => {\n  const { helpers } = getGatsbyApi()\n  const { reporter } = helpers\n\n  //\n  // fetch nodes from WPGQL\n  const activity = reporter.activityTimer(formatLogMessage(`fetching nodes`))\n  activity.start()\n\n  store.subscribe(() => {\n    activity.setStatus(`${store.getState().logger.entityCount} total`)\n  })\n\n  let createdNodeIds\n\n  const hardCachedNodes = await getHardCachedNodes()\n\n  if (!hardCachedNodes) {\n    const wpgqlNodesByContentType = await fetchWPGQLContentNodesByContentType()\n\n    const createNodesActivity = reporter.activityTimer(\n      formatLogMessage(`creating nodes`)\n    )\n    createNodesActivity.start()\n\n    //\n    // Create Gatsby nodes from WPGQL response\n    createdNodeIds = await createGatsbyNodesFromWPGQLContentNodes({\n      wpgqlNodesByContentType,\n      createNodesActivity,\n    })\n\n    await setHardCachedNodes({ helpers })\n\n    createNodesActivity.end()\n    activity.end()\n  } else if (hardCachedNodes) {\n    createdNodeIds = await restoreHardCachedNodes({\n      hardCachedNodes,\n    })\n  }\n\n  // save the node id's so we can touch them on the next build\n  // so that we don't have to refetch all nodes\n  await setPersistentCache({ key: CREATED_NODE_IDS, value: createdNodeIds })\n}\n"],"mappings":"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"}